doctype html
html
  head
      title Changes in React 16
      meta(charset='utf-8')
      script(src='slides.js')
      link(href="https://fonts.googleapis.com/css?family=Gravitas+One|Yeseva+One" rel="stylesheet")
      link(rel="stylesheet", href="./grid-styles.css")
      link(rel="stylesheet", href="./prism.css")

      link(href='styles.css'  rel='stylesheet' type='text/css')
      style.
        .grid { display: grid !important; grid-gap: 20px }
        .grid .item { color: black; }
        style { display: inline-grid !important; }
    body
      section.slides.layout-regular.template-default

        article.first
          h1: mark Changes in React 16!
        article
          h1: mark Hi, I'm JP Wallhorn
          p: br
          p.sub
            img(src="images/germany-flag.png")
            img(src="images/usa-flag.png")
            img(src="images/germany-flag.png")
            img(src="images/usa-flag.png")


        article
          h2(style="font-size:60px;") These slides will be available shortly<br>after this talk <br>I&apos;ll tweet the link out.
          img(src='images/Twitter_logo_white.png', width='300' style="margin:100px auto")

          h2
            a(href='http://twitter.com/Jaypi_', target='_blank') @Jaypi_

        article
          h1 I have my own company
        article
          a(href='https://www.syntx.io/?utm_source=intro_into_react')
            img(src='/images/syntx-website.png', width='1200')
          a(href='https://www.syntx.io/?utm_source=intro_into_react') Syntx

        article
          h2 Worked with<br><br>Blue Bottle Coffee<br>U.S. GOV<br>Mobile Apps Backends

        article
          h2 Before that I worked for ServiceLink Auction as Engineering Director

        article 
          h2 Implemented React.JS<br>E-Commerce Platform<br>(With focus on SEO)

        article
          h1 Let us talk about<br>changes in ReactJS 16

        article
          h2 These are not all changes<br>Just some highlights
          p Check out their blog<br>for the full changelog

        article
          h1 This is the roadmap   

        article
          .grid
            .item Context API
            .item Fragments
            .item Error Boundaries
            .item Portals 
            .item Memo
            .item Lazy
            .item contextType

        article
          h1 READY?!
          p.sub this.letsDoIt() 

        article
          .grid
            .item.current Context API
            .item Fragments
            .item Error Boundaries
            .item Portals 
            .item Memo
            .item Lazy
            .item contextType

        article
          h1 What is it?
          p.sub It doesn't replace Redux

        article
          h1 Share data between components
          p.sub Without explicitly passing it

        article
          h1 What does<br>that mean?
        
        article 
          h1 It's a global object
          p.sub To your React Components

        article
          h1 Why do we<br>need it?
          p.sub So we avoid props drilling

        article
          h2 Music Player Example
          img(src='./images/screenshots/React_Tree.jpeg')
          a(href='https://blog.bitsrc.io/why-you-should-consider-the-new-context-api-in-react-a-deep-dive-d588b66c57b5') Credit

        article
          h2 Normally you would<br>pass props to each<br>component

        article
          h1 It's painful

        article 
          h1 This is the
          h1: mark Context API
          h1 in action

        article 
          img(src='./images/screenshots/React_Tree_Props_Each_Level.jpeg')
          a(href='https://blog.bitsrc.io/why-you-should-consider-the-new-context-api-in-react-a-deep-dive-d588b66c57b5') Credit

        article 
          h1 That's<br>fantastic
          p.sub But how do we implement this? 
          p.sub Is the implementation complicated?

        article
          h1: mark It's easy!

        article
          h1 You will need<br>3 things

        article
          h1 Context
          h1 Provider
          h1 Consumer

        article
          h1 Context

        article
          img(src='./images/screenshots/Context.png')

        article
          p.sub FYI - You can create
          h1 Multiple Contexts

        article
          h1 Provider
          p.sub Needs to be higher in the tree than consumers

        article 
          img(src='./images/screenshots/Provider.png')

        article
          h1 Consumer
          p.sub Requires function as a child that returns JSX

        article
          h1 Make sure you import the Context
        
        article
          img(src='./images/screenshots/Consumer.png')

        article
          h1 All in One
          p.sub ReactJS Official Example
        
        article
          img(src='./images/screenshots/Context-API.png')

        article
          h1 That's it! 
          p.sub Should you implement it right away<br>for everything?

        article
          h1: mark No! 

        article
          h2 It's good for medium sized applications

        article 
          h2 Good Use Cases:
          p Multi Theme Projects
          p Multi Language Projects

        article
          h2 You are creating outside dependencies with this
          p Just make sure to keep that in mind

        article
          .grid
            .item Context API
            .item.current Fragments
            .item Error Boundaries
            .item Portals 
            .item Memo
            .item Lazy
            .item contextType

        article
          h1 Simple Component
          p.sub This is not a problem and straight forward

        article
          img(src='./images/screenshots/Simple_Component.png')
        
        article 
          h2 Return multiple elements<br>from a component

        article
          img(src='./images/screenshots/Simple_Component_error.png')

        article
          h1 Now this happens ...

        article
          img(src='./images/screenshots/Error_Message.png')

        article 
          h1 What just happened?

        article 
          h2 As you know,<br>you have to <br>wrap it into a div
          p Just like this
        
        article 
          img(src='./images/screenshots/Simple_Component_DIV.png')

        article
          h1 DIV, DIV, DIV
          p.sub This is not ideal

        article
          p.sub Welcome to
          h1 Fragments

        article
          img(src='./images/screenshots/Simple_Component_Fragment.png')

        article
          .grid
            .item Context API
            .item Fragments
            .item.current Error Boundaries
            .item Portals 
            .item Memo
            .item Lazy
            .item contextType

        article
          p.sub Previously, runtime errors during rendering
          h1 Broke your<br>App

        article
          h2 You had to refresh<br>the whole application

        article 
          h2 By default, React 16 will<br>just unmount the tree<br>and doesn't display<br>the code

        article
          h1 That's not<br>ideal either but...

        article 
          h1 New Lifecycle Method
          p.sub Kind of like Try, Catch

        article
          h2 ComponentDidCatch
          p.sub (error, info)

        article
          img(src='./images/screenshots/ComponentDidCatch.png')

        article 
          h1 Catch Block
          p.sub for 
          h1 Components
          a(href='https://codepen.io/gaearon/pen/wqvxGa?editors=0010') Sandbox

        article
          h1 Error Component
          p.sub Recommended way to implement this

        article
          img(src='./images/screenshots/ErrorBoundary.png')

        article
          h2 Then you can use that<br>within your app

        article
          img(src='./images/screenshots/ErrorBoundary_Usafge.png')

        article
          h1 Catch Errors<br>in Product

        article
          img(src='./images/screenshots/Product.png')

        article
          .grid
            .item Context API
            .item Fragments
            .item Error Boundaries
            .item.current Portals 
            .item Memo
            .item Lazy
            .item contextType

        article
          h1 Not every website uses React

        article
          h1 Now parts of<br>it can be<br>React
          p.sub For example: usage within CMS applications

        article
          h2 Portals let you render a<br>bit of React-controlled<br>DOM outside of the parent<br>component

        article
          h1 Render DOM outside of parent

        article
          img(src='./images/screenshots/Portal.png')
          a(href='https://codepen.io/davidgilbertson/pen/xPVMqp') Sandbox

        article
          .grid
            .item Context API
            .item Fragments
            .item Error Boundaries
            .item Portals 
            .item.current Memo
            .item Lazy
            .item contextType

        article
          h1 Hot stuff! 
          p.sub Just got released!

        article
          h2 similar to
          h2 React.PureComponent

        article
          h1 But for<br>classes
          p.sub Remind me. What does it do again?

        article
          h1 Performance Boost
          p.sub If the function component renders the<br>same result it will skip rendering

        article
          h1 Wrap your class
          p.sub export default React.memo

        article
          h1 It will save<br>the results
          p.sub For shallow comparison

        article
          h1 You can control the comparison

        article
          img(src='./images/screenshots/Memo.png')

        article
          .grid
            .item Context API
            .item Fragments
            .item Error Boundaries
            .item Portals 
            .item Memo
            .item.current Lazy
            .item contextType

        article 
          h1 Code<br>Splitting 
          p.sub with suspense
        
        article
          h1 Previously<br>done with<br>Webpack

        article
          h1 Now it's<br>built in

        article 
          h1 Before

        article
          img(src='./images/screenshots/Before_Lazy.png')

        article 
          h1 After

        article 
          img(src='./images/screenshots/After_Lazy.png')

        article
          p This will automatically load<br>the bundle containing the<br>OtherComponent when this<br>component gets rendered

        article
          h1 Cover your<br>base 
          p.sub In case OtherComponent renders first

        article
          h1 Fallback<br>Component

        article
          img(src='./images/screenshots/Fallback.png')

        article
          h2 Fallback props accepts<br>any React Element

        article
          h1 You can wrap multiple components

        article
          img(src='./images/screenshots/Lazy_Multiple.png')

        article
          h1 Error Boundaries
          p.sub In combination with lazy loading

        article
          img(src='./images/screenshots/Lazy_ErrorBoundaries.png')

        article
          h1 Lazy with<br>React Router

        article
          img(src='./images/screenshots/Lazy_React_Router.png')

        article
          h1 Warning
          p.sub Not supported with Server-Side-Rendering yet

        article
          .grid
            .item Context API
            .item Fragments
            .item Error Boundaries
            .item Portals 
            .item Memo
            .item Lazy
            .item.current contextType

        article 
          h1 Addition to Context API
          p.sub Convenience API For Classes

        article 
          img(src='./images/screenshots/Context_Type.png')

        article
          h1 Be warned
          p.sub Only works with single context currently

        article
          h1 Finished! 
        
        article
          h1 Looks like<br>a lot of changes?
          p.sub Don't worry

        article
          h1 Quote by Wes Bos

        article
          h1 React is Evolving
          p.sub but..

        article
          h2 Most of these are<br>additions, not changes
          p.sub They make our applications better!

        article
          h1 Want more?
          p.sub Read the ReactJS Blog. It contains all changes
          p.sub Especially for v16.6 - Released 10/23/18
          a(href='https://reactjs.org/blog/2018/10/23/react-v-16-6.html') React V16.6

        article
          h1 I hope this<br>was useful!
          p.sub Feel free to ask questions
      script(src='prism.js' data-manual)
      script(src='./custom-highlight.js')
